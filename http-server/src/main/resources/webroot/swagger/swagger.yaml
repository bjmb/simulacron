swagger: '2.0'
info:
  description: >
    The simulacron REST API allows one to interact with simulacron, performing
    operations such as provisioning

    up clusters, stubbing queries and behaviors, and monitoring driver client
    connections.
  version: 0.0.1-SNAPSHOT
  title: Simulacron REST API
host: 'localhost:8187'
basePath: /
tags:
  - name: cluster
    description: Cluster Provisioning and Metadata
    externalDocs:
      description: GitHub Repo
      url: 'http://github.com/riptano/testeng-devtools'
paths:
  /cluster:
    post:
      tags:
        - cluster
      summary: Provision a new cluster
      description: Provisions a Cluster by setting up listening interfaces for each node.
      operationId: provisionCluster
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: query
          name: data_centers
          description: >
            For convenience, use this parameter to provision a cluster by
            providing a data center specification.

            Accepts a comma separated list of DC configurations.

            i.e. `"3,4,5"` sets up 3 data centers with 3, 4, and 5 nodes
            respectively.


            **Note**: If this is provided the request body is ignored.
          required: false
          type: string
        - in: query
          name: cassandra_version
          description: The Cassandra version of this Cluster.  This only applies if `data_centers` is specified.
          required: false
          type: string
        - in: query
          name: dse_version
          description: The DSE version of this Cluster.  This only applies if `data_centers` is specified.
          required: false
          type: string
        - in: body
          name: body
          description: >
            If specified, the complete configuration for a Cluster and its data
            centers and nodes.

            Use this in cases where you want to override configuration such as
            the cassandra version,

            peer info, or socket addresses bound to nodes.


            **Note**: Used only if `dataCenters` is not provided.
          required: false
          schema:
            $ref: '#/definitions/Cluster'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/Cluster'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
    get:
      tags:
        - cluster
      summary: Retrieve existing clusters
      operationId: retrieveClusters
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: Cluster listing
          schema:
            type: array
            items:
              $ref: '#/definitions/Cluster'
        '400':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - cluster
      summary: Delete all clusters
      description: Deletes all existing Clusters and unregisters all ips assigned.
      operationId: unregisterClusters
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '202':
          description: Clusters deleted
        '400':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/cluster/{id}':
    get:
      tags:
        - cluster
      summary: Find cluster by id
      operationId: findClusterById
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the cluster
          required: true
          type: integer
      responses:
        '200':
          description: Cluster state
          schema:
            $ref: '#/definitions/Cluster'
        '404':
          examples:
            "Not found":
              message: No cluster registered with id 2
              status_code: 404
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - cluster
      summary: Delete cluster by id
      operationId: unregisterClusterById
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of the cluster
          required: true
          type: integer
      responses:
        '202':
          description: Cluster deleted
        '400':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
        '404':
          examples:
            "Not found":
              message: No cluster registered with id 2
              status_code: 404
          schema:
            $ref: '#/definitions/Error'
  '/prime-query-single':
    post:
      tags:
        - prime-query-single
      summary: Primes the cluster with a given query
      operationId: primeQuerySingle
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          description: >
            Contains a PrimedQuery that contains a then/when section this will be used to match query on recieve and from a construct a proper response.
          required: true
          schema:
            $ref: '#/definitions/PrimeQuery'

      responses:
        '201':
          description: PrimedQuery
          schema:
            $ref: '#/definitions/PrimeQuery'
        '400':
          examples:
            "Unable to parse provided query":
              message: Error encountered while attempting to
              status_code: 400
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - prime-query-single
      summary: Deletes all primed queries
      operationId: deletePrimedQueries
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: Cluster deleted
definitions:
  PeerInfo:
    type: object
    properties:
      rack:
        type: string
        example: rack1
      bootstrapped:
        type: string
        example: COMPLETED
      cql_version:
        type: string
        example: "3.2.0"
      token:
        type: string
        example: 6148914691236517204
      graph:
        type: boolean
        example: false
  Node:
    type: object
    required:
      - name
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
        example: node0
      cassandra_version:
        type: string
        example: 3.0.13
      dse_version:
        type: string
        example: 5.0.8
      peer_info:
        $ref: '#/definitions/PeerInfo'
  DataCenter:
    type: object
    required:
      - name
      - nodes
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
        example: dc0
      nodes:
        type: array
        items:
          $ref: '#/definitions/Node'
      cassandra_version:
        type: string
        example: 3.0.13
      dse_version:
        type: string
        example: 5.0.8
      peer_info:
        $ref: '#/definitions/PeerInfo'
  Cluster:
    type: object
    required:
      - name
      - data_centers
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
        example: cluster0
      data_centers:
        type: array
        items:
          $ref: '#/definitions/DataCenter'
      cassandra_version:
        type: string
        example: 3.0.13
      dse_version:
        type: string
        example: 5.0.8
      peer_info:
        $ref: '#/definitions/PeerInfo'
    example:
      name: "cluster0"
      dse_version: "5.0.8"
      data_centers:
        - name: "dc0"
          nodes:
          - name: "node0"
            peer_info:
              rack: "rack0"
          - name: "node1"
            peer_info:
              rack: "rack1"
          - name: "node2"
            peer_info:
              rack: "rack2"
        - name: "dc1"
          nodes:
          - name: "node0"
          - name: "node1"
  When:
    type: object
    required:
      - query
    properties:
      query:
        type: string
        example: "SELECT * FROM table"
      consistency_level:
        type: string
        example: "LOCAL_ONE"
    example:
      query: "SELECT * FROM TABLE"
  Then:
    type: object
    required:
      - rows
      - result
      - column_types
    properties:
      rows:
        type: array
        example:
          column1: "value1"
          column2: "value2"
      result:
        type: string
        example: :success
      column_types:
        type: OrderedMap
        example:
          column1: "bigint"
          column2: "ascii"
  PrimeQuery:
    type: object
    required:
      - when
      - then
    properties:
      when:
        $ref: '#/definitions/When'
      then:
        $ref: '#/definitions/Then'

  Error:
    type: object
    required:
      - message
      - status_code
    properties:
      message:
        type: string
        example: "An error has occurred"
      status_code:
        type: string
        example: 400